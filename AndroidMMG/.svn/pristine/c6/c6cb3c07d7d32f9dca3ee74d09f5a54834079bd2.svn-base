package net.sherpin.mediaviewer;

import java.io.InputStream;
import java.util.ArrayList;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import net.sherpin.mediaviewer.R;
import net.sherpin.mediaviewer.classes.ProfileItem;
import net.sherpin.mediaviewer.handlers.ProfileItemHandler;
import net.sherpin.mediaviewer.utility.Global;
import net.sherpin.mediaviewer.utility.WebUtil;

import org.apache.http.HttpResponse;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.facebook.Session;

import android.app.ProgressDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class MySherpasActivity extends SherlockFragmentActivity
{
	private String userid = "";
	private String username = "";

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		this.setContentView(R.layout.mysherpaslist);
		loadContent();
	}

	@Override
	protected void onResume()
	{
		super.onResume();
	}

	private void loadContent()
	{
		SharedPreferences settings = getSharedPreferences(Global.filePrefs, 0);
		if (settings != null)
		{
			userid = settings.getString(Global.prefUserID, "");
			username = settings.getString(Global.prefUsername, "");
		}

		setGreetingWithUserInformation();

		final ProgressDialog progress = ProgressDialog.show(this, "", "Downloading...", true);
		progress.setIndeterminate(true);
		progress.setCancelable(true);
		new Thread(new Runnable()
		{
			public void run()
			{
				final ProfileItemHandler profiles = getProfileItemHandler();
				final ArrayList<LinearLayout> items = createSherpaList(profiles);

				runOnUiThread(new Runnable()
				{
					public void run()
					{
						setupSherpaList(items);
						progress.dismiss();
					}
				});
			}
		}).start();
	}

	@Override
	public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu)
	{
		// menu.add(0, ProfileListViewer.MENU_REGISTER, 0, R.string.btn_reg);
		menu.add(0, Global.MENU_LOGOUT, 0, "Logout");
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item)
	{
		switch (item.getItemId())
		{
		case Global.MENU_REGISTER:
			// showRegisterDialog();
			return true;
		case Global.MENU_LOGOUT:
			SharedPreferences settings = getSharedPreferences(Global.filePrefs, 0);
			if (settings != null)
			{
				SharedPreferences.Editor e = settings.edit();
				e.remove(Global.prefUserID);
				e.remove(Global.prefUsername);
				e.remove(Global.prefPassword);
				e.commit();
			}
			WebUtil.client = null;
			Session session = Session.getActiveSession();
			if (session != null && session.isOpened())
			{
				session.closeAndClearTokenInformation();
			}
			Intent intent = new Intent(getApplicationContext(), net.sherpin.mediaviewer.HomeActivity.class);
			this.startActivity(intent);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public ProfileItemHandler getProfileItemHandler()
	{
		ProfileItemHandler proflisthandler = null;
		try
		{
			// Get the Video titles from the server
			String urlProfileList = "https://www.sherpin.com/xml/xml_profilelist.php";
			HttpResponse resp = WebUtil.GetResponse(urlProfileList, getApplicationContext());
			proflisthandler = parseProfileListXML(resp);
		}
		catch (Exception ex)
		{
			Toast.makeText(this.getApplicationContext(), String.format("Failed to connect: %s", ex.getMessage()), Toast.LENGTH_LONG).show();
			Log.e(Global.tagHTTPGET, ex.getMessage());
		}
		return proflisthandler;
	}

	private ProfileItemHandler parseProfileListXML(HttpResponse resp)
	{
		ProfileItemHandler proflisthandler = new ProfileItemHandler();
		try
		{
			SAXParserFactory spf = SAXParserFactory.newInstance();
			SAXParser sp = spf.newSAXParser();

			// Use the cached ProfileListHandler to parse the XML into a
			// List<ProfileItem> object
			XMLReader rdr = sp.getXMLReader();
			proflisthandler.clearItems();
			rdr.setContentHandler(proflisthandler);

			rdr.parse(new InputSource(resp.getEntity().getContent()));
		}
		catch (Exception ex)
		{
			Toast.makeText(this.getApplicationContext(), String.format("Failed to parse XML(showGuideList): %s", ex.getMessage()), Toast.LENGTH_LONG)
					.show();
		}
		return proflisthandler;
	}

	private void setGreetingWithUserInformation()
	{
		TextView profilename = (TextView) findViewById(R.id.grettings);
		if (TextUtils.isEmpty(username))
		{
			profilename.setText("Greetings");
		}
		else
		{
			profilename.setText(("Greeting, " + username));
		}
	}

	private ArrayList<LinearLayout> createSherpaList(ProfileItemHandler proflisthandler)
	{
		ArrayList<LinearLayout> list = new ArrayList<LinearLayout>();
		int totalWidth = 2;

		while (proflisthandler.hasMore())
		{
			LinearLayout items = new LinearLayout(this.getApplicationContext());
			items.setOrientation(LinearLayout.HORIZONTAL);

			LinearLayout.LayoutParams paramsleft = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 1.0f);
			paramsleft.gravity = Gravity.LEFT | Gravity.CENTER_VERTICAL;
			LinearLayout.LayoutParams paramslright = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT, 1.0f);
			paramslright.gravity = Gravity.RIGHT | Gravity.CENTER_VERTICAL;
			do
			{
				LinearLayout holder = new LinearLayout(this.getApplicationContext());
				holder.setOrientation(LinearLayout.VERTICAL);
				holder.setTag(proflisthandler.getCurrProfile());
				holder.setOnClickListener(onClickProfile);
				holder.setPadding(50, 0, 0, 0);
				try
				{
					InputStream is = (InputStream) new java.net.URL(proflisthandler.getCurrProfile().Icon).getContent();
					Drawable d = Drawable.createFromStream(is, "Sherpa");
					ImageView icon = new ImageView(this.getApplicationContext());
					icon.setImageDrawable(d);
					icon.setMinimumHeight(150);
					icon.setMinimumWidth(150);
					holder.addView(icon);
				}
				catch (Exception e)
				{
					// TODO: Assign default image
					Toast.makeText(this.getApplicationContext(), "Sherpa setup: " + e.getMessage(), Toast.LENGTH_LONG).show();
				}

				TextView tvProfile = new TextView(this.getApplicationContext());
				tvProfile.setText(proflisthandler.getCurrProfile().name);
				tvProfile.setTextSize(18);
				tvProfile.setTypeface(null, Typeface.BOLD);
				tvProfile.setTextColor(Color.WHITE);
				tvProfile.setGravity(Gravity.CENTER_HORIZONTAL);
				tvProfile.setPadding(0, 0, 0, 10);
				tvProfile.setTextAppearance(this, R.id.txtGuide);
				holder.addView(tvProfile);

				/*
				 * if (proflisthandler.getCurrProfile().desc.length() > 0) {
				 * TextView tvDesc = new TextView(this.getApplicationContext());
				 * tvDesc.setText(proflisthandler.getCurrProfile().desc);
				 * tvDesc.setTag(proflisthandler.getCurrProfile());
				 * tvDesc.setTextSize(14); tvDesc.setTextColor(Color.WHITE);
				 * tvDesc.setPadding(5, 5, 5, 5);
				 * tvDesc.setBackgroundColor(backgroundColor);
				 * tvDesc.setTextAppearance(this, R.id.txtGuide);
				 * tvDesc.setOnClickListener(onClickProfile);
				 * holder.addView(tvDesc); }
				 */
				if (totalWidth == 2)
					items.addView(holder, paramsleft);
				else
					items.addView(holder, paramslright);
				proflisthandler.moveNext();
				totalWidth--;
			}
			while (totalWidth > 0 && proflisthandler.hasMore());
			list.add(items);
			totalWidth = 2;
		}
		return list;
	}

	private void setupSherpaList(ArrayList<LinearLayout> items)
	{
		LinearLayout llGuide = (LinearLayout) findViewById(R.id.defaultprofile_ll);
		for (LinearLayout item : items)
		{
			llGuide.addView(item, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
		}
	}

	private OnClickListener onClickProfile = new OnClickListener()
	{
		public void onClick(View arg0)
		{
			LinearLayout tv = (LinearLayout) arg0;
			ProfileItem profile = (ProfileItem) tv.getTag();
			Intent intent = new Intent(MySherpasActivity.this, net.sherpin.mediaviewer.SherpaMediaListFragment.class);
			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			intent.putExtra("net.sherpin.mediaviewer.ProfileTitle", profile.name);
			intent.putExtra("net.sherpin.mediaviewer.ProfileID", profile.pid);
			intent.putExtra("net.sherpin.mediaviewer.ProfileDesc", profile.desc);
			intent.putExtra("net.sherpin.mediaviewer.Username", username);
			intent.putExtra("net.sherpin.mediaviewer.UserID", userid);
			MySherpasActivity.this.startActivity(intent);
		}
	};

	// Listen for results.
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data)
	{
		// See which child activity is calling us back.
		switch (requestCode)
		{
		case Global.REQ_REGISTER:
			if (resultCode == RESULT_OK)
			{
				// Return to the main ListView screen
				Bundle b = data.getExtras();
				userid = b.getString("ID");
				SharedPreferences prefs = getSharedPreferences(Global.filePrefs, 0);
				prefs.edit().putString(Global.prefUserID, userid).commit();
				loadContent();
			}
			break;
		default:
			break;
		}
	}
}
