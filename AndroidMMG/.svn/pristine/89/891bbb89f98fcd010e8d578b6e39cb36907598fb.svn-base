package net.sherpin.mediaviewer;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.google.android.youtube.player.YouTubeInitializationResult;
import com.google.android.youtube.player.YouTubePlayer;
import com.google.android.youtube.player.YouTubePlayerSupportFragment;
import com.google.android.youtube.player.YouTubePlayer.OnInitializedListener;
import com.google.android.youtube.player.YouTubePlayer.Provider;

import net.sherpin.mediaviewer.R;
import net.sherpin.mediaviewer.classes.Global;
import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.media.AudioManager;
import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.Toast;

public class VideoViewerActivity extends SherlockFragmentActivity
{
	private WebView webview;
//	private AudioManager audio;

	private String videoUrl;
	private String titleVideo;
	private String Desc;
	private YouTubePlayerSupportFragment youtubeFragment;

	@Override
	public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu)
	{
		menu.add(0, Global.MENU_RELOAD, 0, "Reload");
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item)
	{
		switch (item.getItemId())
		{
		case Global.MENU_RELOAD:
			webview.reload();
			return true;
		}
		return super.onOptionsItemSelected(item);
	}


	@SuppressLint("SetJavaScriptEnabled")
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		this.requestWindowFeature(Window.FEATURE_PROGRESS);
		super.onCreate(savedInstanceState);
		this.setContentView(R.layout.video_view);

		videoUrl = this.getIntent().getStringExtra("net.sherpin.mediaviewer.VideoURL");
		titleVideo = this.getIntent().getStringExtra("net.sherpin.mediaviewer.VideoTitle");
		Desc = this.getIntent().getStringExtra("net.sherpin.mediaviewer.VideoDesc");
		// final String ThumbnailVideo = this.getIntent().getStringExtra("net.sherpin.mediaviewer.VideoThumbnail");
		// DisplayMetrics m = getResources().getDisplayMetrics();

		this.setProgressBarIndeterminateVisibility(true);
		this.setProgressBarIndeterminate(true);

		webview = (WebView) this.findViewById(R.id.videowebview);

		webview.getSettings().setJavaScriptEnabled(true);
		webview.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
		webview.getSettings().setUseWideViewPort(true);
		webview.getSettings().setLoadWithOverviewMode(true);
		webview.getSettings().setPluginState(WebSettings.PluginState.ON);
		// webview.getSettings().setUserAgent(0);
		// webview.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
		// webview.setScrollbarFadingEnabled(false);

		webview.setWebChromeClient(new WebChromeClient()
		{
			@Override
			public void onProgressChanged(WebView view, int progress)
			{

			}
		});

		webview.setWebViewClient(new WebViewClient()
		{
			@Override
			public void onReceivedError(WebView view, int errorCode, String description, String failingUrl)
			{
				Toast.makeText(VideoViewerActivity.this, "Error: " + description, Toast.LENGTH_SHORT).show();
			}

			@Override
			public boolean shouldOverrideUrlLoading(WebView view, String url)
			{
				webview.loadUrl(url);
				return true;
			}

			@Override
			public void onPageStarted(WebView view, String url, Bitmap favicon)
			{
				super.onPageStarted(view, url, favicon);
			}

			@Override
			public void onPageFinished(WebView view, String url)
			{
				super.onPageFinished(view, url);
				VideoViewerActivity.this.setProgressBarIndeterminateVisibility(false);
			}
		});

//		audio = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
		setVolumeControlStream(AudioManager.STREAM_MUSIC);

		CheckBox dislike = (CheckBox) findViewById(R.id.dislike);
		dislike.setOnClickListener(new OnClickListener()
		{
			public void onClick(View v)
			{
				// Set a flag on the video to remove it from the list
			}
		});
		Button detailbutton = (Button) findViewById(R.id.VideoDetail);
		detailbutton.setOnClickListener(new OnClickListener()
		{
			public void onClick(View v)
			{
				AlertDialog.Builder builder = new AlertDialog.Builder(v.getContext());
				builder.setTitle("Details:");
				final String[] items = new String[3];
				items[0] = ("Title: " + titleVideo);
				items[1] = ("Description: " + Desc);
				items[2] = ("URL: " + videoUrl);

				builder.setItems(items, new DialogInterface.OnClickListener()
				{
					public void onClick(DialogInterface dialog, int item)
					{
						Toast.makeText(getApplicationContext(), items[item], Toast.LENGTH_LONG).show();
					}
				});
				AlertDialog alert = builder.create();
				alert.show();
			}
		});
	}

	@Override
	protected void onResume()
	{
		super.onResume();
		loadVideoUrl();
	}

//	@Override
//	public boolean onKeyDown(int keyCode, KeyEvent event)
//	{
//		switch (keyCode)
//		{
//		case KeyEvent.KEYCODE_VOLUME_UP:
////			audio.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_RAISE, AudioManager.FLAG_SHOW_UI);
//			return true;
//		case KeyEvent.KEYCODE_VOLUME_DOWN:
////			audio.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_LOWER, AudioManager.FLAG_SHOW_UI);
//			return true;
//		default:
//			return super.onKeyDown(keyCode, event);
//		}
//	}

	@Override
	protected void onPause()
	{
		super.onPause();
	}

	@Override
	protected void onStop()
	{
		super.onStop();
	}

	@Override
	protected void onDestroy()
	{
		super.onDestroy();
		webview.destroy();
	}

	@Override
	public void onConfigurationChanged(Configuration newConfig)
	{
		super.onConfigurationChanged(newConfig);
	}

	private void loadVideoUrl()
	{
		if (!TextUtils.isEmpty(videoUrl))
		{
			if (webview.getVisibility() == View.INVISIBLE)
				webview.setVisibility(View.VISIBLE);

			if (videoUrl.contains("youtube.com"))
			{
				launchYoutubeVideo();
			}
			else
			{
				DisplayMetrics m = getResources().getDisplayMetrics();
	        	int height = (int) (m.heightPixels / m.density) - getSupportActionBar().getHeight();// - ((RelativeLayout) getView().findViewById(R.id.videolayout)).getHeight();//getView().getHeight();
	        	int width = (int) (m.widthPixels / m.density);//getView().getWidth();
				if (videoUrl.contains("<script"))
				{
					int begin = videoUrl.indexOf("src=\"") + 5;
					int end = videoUrl.indexOf("\">", begin);
					String Url = videoUrl.substring(begin, end);
					webview.loadDataWithBaseURL(Url, videoUrl.replace("h=263", "h=" + m.heightPixels).replace("w=466", "w=" + m.widthPixels),
							"text/html", "utf-8", null);
				}
				else if(videoUrl.contains("src=\""))
				{
					webview.loadDataWithBaseURL(videoUrl.split("src=\"")[1].replace("\"", ""), String.format(Global.htmlMetaTag, "<" + 
							videoUrl.replace("height=\"270\"", "height='" + height + "'")
									.replace("width=\"480\"", "width='" + width + "'") + "/>"), "text/html", "utf-8", null);
				}
				else
				{
					String iframe = "iframe id='imgVideo' frameborder='0' width='" + width + "' height='" + height + "' src='" + videoUrl + "'";
					webview.loadDataWithBaseURL(videoUrl, String.format(Global.htmlMetaTag, "<" + iframe + "/>"), "text/html", "utf-8", null);
				}
			}
			Log.e("SHERPIN", "url is " + videoUrl);
		}
	}

	private void launchYoutubeVideo()
	{
		if (youtubeFragment == null)
		{
			youtubeFragment = YouTubePlayerSupportFragment.newInstance();
//			youtubeFragment.setRetainInstance(true);
		}
		youtubeFragment.initialize(Global.youtubeAPIkey, new OnInitializedListener()
		{
			public void onInitializationSuccess(Provider provider, YouTubePlayer player, boolean wasRestored)
			{
				if (!wasRestored)
				{
					int slashIndex = videoUrl.lastIndexOf("/") + 1;
					String videoID = videoUrl.substring(slashIndex, videoUrl.length());
					player.cueVideo(videoID);
				}
			}

			public void onInitializationFailure(Provider arg0, YouTubeInitializationResult arg1)
			{
				arg1.getErrorDialog(VideoViewerActivity.this, arg1.ordinal());
			}
		});
		FragmentManager m = getSupportFragmentManager();
		
		m.beginTransaction().replace(R.id.video_fragmentlayout, youtubeFragment).commit();
	}
}
