package net.sherpin.mediaviewer.utility;

import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.UnrecoverableKeyException;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;

import net.sherpin.mediaviewer.classes.CustomSSLSocketFactory;
import net.sherpin.mediaviewer.classes.CustomX509TrustManager;

import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.conn.ssl.X509HostnameVerifier;
import org.apache.http.cookie.Cookie;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.impl.cookie.BasicClientCookie;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.HTTP;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.text.TextUtils;
import android.util.Log;

public class WebUtil
{
	public static DefaultHttpClient client = null;

	@SuppressLint("TrulyRandom") 
	private static void initializeHttpClient() throws NoSuchAlgorithmException, KeyManagementException, UnrecoverableKeyException, KeyStoreException
	{
		client = new DefaultHttpClient();

		SSLContext ctx = SSLContext.getInstance("TLS");
		ctx.init(null, new TrustManager[] { new CustomX509TrustManager() }, new SecureRandom());

		SSLSocketFactory ssf = new CustomSSLSocketFactory(ctx);
		ssf.setHostnameVerifier((X509HostnameVerifier)SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
		
		HttpParams params = new BasicHttpParams();
        HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);
        HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);
        
		SchemeRegistry registry = new SchemeRegistry();
		registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
		registry.register(new Scheme("https", ssf, 443));

		// HostnameVerifier hostnameVerifier =
		// org.apache.http.conn.ssl.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;
		 HttpsURLConnection.setDefaultHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
		//
		// SSLSocketFactory socketFactory = SSLSocketFactory.getSocketFactory();
		// socketFactory.setHostnameVerifier((X509HostnameVerifier)
		// hostnameVerifier);
		//
		// SchemeRegistry registry = new SchemeRegistry();
		// registry.register(new Scheme("https", socketFactory, 443));

		ThreadSafeClientConnManager mgr = new ThreadSafeClientConnManager(params, registry);
		client = new DefaultHttpClient(mgr, params);
	}
	
	public static void cleanUp() 
	{
		if(client != null)
		{
			client = null;
		}
	}

	public static HttpResponse GetResponse(String url, Context context) throws KeyManagementException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException
	{
		if (client == null)
		{
			initializeHttpClient();
		}

		HttpGet get = new HttpGet(url);
		HttpResponse response = null;
		try
		{
			response = client.execute(get);
		}
		catch (Exception e)
		{
			Log.e("WebUtil", "Error during Get: " + e.getLocalizedMessage());
		}
		return response;
	}

	public static HttpResponse PostResponse(String url, Context context) throws KeyManagementException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException
	{
		if (client == null)
		{
			initializeHttpClient();
		}

		HttpPost httpPost = new HttpPost(url);
		HttpResponse response = null;
		try
		{
			response = client.execute(httpPost);
		}
		catch (Exception e)
		{
			Log.e("WebUtil", "Error during Post: " + e.getLocalizedMessage());
		}
		return response;
	}

	public static HttpResponse PostResponse(String url, String xml, Context context) throws KeyManagementException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException
	{
		if (client == null)
		{
			initializeHttpClient();
		}

		HttpPost httpPost = new HttpPost(url);
		HttpResponse response = null;
		try
		{
			httpPost.setEntity(new StringEntity(xml));
			response = client.execute(httpPost);
		}
		catch (Exception e)
		{
			Log.e("WebUtil", "Error during Post(xml): " + e.getLocalizedMessage());
		}
		return response;
	}

	public static HttpResponse PostResponse(String url, UrlEncodedFormEntity xml, Context context) throws KeyManagementException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException
	{
		if (client == null)
		{
			initializeHttpClient();
		}

		HttpPost httpPost = new HttpPost(url);
		HttpResponse response = null;
		try
		{
			httpPost.setEntity(xml);
			response = client.execute(httpPost);
		}
		catch (Exception e)
		{
			Log.e("WebUtil", "Error during Post(URLEncodedForm): " + e.getLocalizedMessage());
		}
		return response;
	}

	public static HttpResponse PostResponse(String url, String xml, String contentType, Context context) throws KeyManagementException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException
	{
		if (client == null)
		{
			initializeHttpClient();
		}

		HttpPost httpPost = new HttpPost(url);
		httpPost.setHeader("Content-type", contentType);
		HttpResponse response = null;
		try
		{
			if (!TextUtils.isEmpty(xml))
				httpPost.setEntity(new StringEntity(xml));

			response = client.execute(httpPost);
		}
		catch (Exception e)
		{
			Log.e("WebUtil", "Error during Post(xml contenttype): " + e.getLocalizedMessage());
		}
		return response;
	}

	public static HttpResponse PostResponse(String url, HttpParams params, Context context) throws KeyManagementException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException
	{
		if (client == null)
		{
			initializeHttpClient();
		}

		client.setParams(params);

		HttpPost httpPost = new HttpPost(url);
		HttpResponse response = null;
		try
		{
			response = client.execute(httpPost);
		}
		catch (Exception e)
		{
			Log.e("WebUtil", "Error during Post(params): " + e.getLocalizedMessage());
		}
		return response;
	}

	public static void storeCookies(SharedPreferences prefs) throws KeyManagementException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException
	{
		if (client == null)
		{
			initializeHttpClient();
		}

		String cookiesJSON = "";
		for (Cookie c : client.getCookieStore().getCookies())
		{
			cookiesJSON += c.getName() + ":" + c.getValue() + "~";
		}
		prefs.edit().putString(Global.prefCookies, cookiesJSON);
	}

	public static void loadCookies(SharedPreferences prefs) throws KeyManagementException, UnrecoverableKeyException, NoSuchAlgorithmException, KeyStoreException
	{
		if (client == null)
		{
			initializeHttpClient();
		}

		String[] cookies = prefs.getString(Global.prefCookies, "~").split("~");

		for (String cookie : cookies)
		{
			if (cookie.contains(":"))
			{
				String[] cookieparts = cookie.split(":");
				client.getCookieStore().addCookie(new BasicClientCookie(cookieparts[0], cookieparts[1]));
			}
		}

	}
}