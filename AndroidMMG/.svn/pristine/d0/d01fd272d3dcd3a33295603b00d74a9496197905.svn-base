package net.sherpin.mediaviewer;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;

import net.sherpin.mediaviewer.classes.VideoItem;
import net.sherpin.mediaviewer.utility.Global;
import net.sherpin.mediaviewer.utility.WebUtil;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.message.BasicNameValuePair;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.media.AudioManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.FragmentManager;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.Toast;

import com.actionbarsherlock.app.SherlockFragmentActivity;
import com.google.android.youtube.player.YouTubeInitializationResult;
import com.google.android.youtube.player.YouTubePlayer;
import com.google.android.youtube.player.YouTubePlayer.OnInitializedListener;
import com.google.android.youtube.player.YouTubePlayer.Provider;
import com.google.android.youtube.player.YouTubePlayerSupportFragment;

public class VideoViewerActivity extends SherlockFragmentActivity
{
	private WebView webview;
	// private AudioManager audio;
	private YouTubePlayerSupportFragment youtubeFragment;

	private VideoItem currentVideoItem;

	@Override
	public boolean onCreateOptionsMenu(com.actionbarsherlock.view.Menu menu)
	{
		menu.add(0, Global.MENU_RELOAD, 0, "Reload");
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(com.actionbarsherlock.view.MenuItem item)
	{
		switch (item.getItemId())
		{
		case Global.MENU_RELOAD:
			webview.reload();
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@SuppressLint("SetJavaScriptEnabled")
	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		this.requestWindowFeature(Window.FEATURE_PROGRESS);
		super.onCreate(savedInstanceState);
		this.setContentView(R.layout.video_view);

		currentVideoItem = new VideoItem();
		currentVideoItem.objectify(this.getIntent().getStringExtra(Global.currentVideoItem));
		// DisplayMetrics m = getResources().getDisplayMetrics();

		this.setProgressBarIndeterminateVisibility(true);
		this.setProgressBarIndeterminate(true);

		webview = (WebView) this.findViewById(R.id.videowebview);

		webview.getSettings().setJavaScriptEnabled(true);
		webview.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
		webview.getSettings().setUseWideViewPort(true);
		webview.getSettings().setLoadWithOverviewMode(true);
		webview.getSettings().setPluginState(WebSettings.PluginState.ON);
		// webview.getSettings().setUserAgent(0);
		webview.setScrollBarStyle(View.SCROLLBARS_OUTSIDE_OVERLAY);
		webview.setScrollbarFadingEnabled(false);

		webview.setWebChromeClient(new WebChromeClient()
		{
			@Override
			public void onProgressChanged(WebView view, int progress)
			{

			}
		});

		webview.setWebViewClient(new WebViewClient()
		{
			@Override
			public void onReceivedError(WebView view, int errorCode, String description, String failingUrl)
			{
				Toast.makeText(VideoViewerActivity.this, "Error: " + description, Toast.LENGTH_SHORT).show();
			}

			@Override
			public boolean shouldOverrideUrlLoading(WebView view, String url)
			{
				webview.loadUrl(url);
				return true;
			}

			@Override
			public void onPageStarted(WebView view, String url, Bitmap favicon)
			{
				super.onPageStarted(view, url, favicon);
			}

			@Override
			public void onPageFinished(WebView view, String url)
			{
				super.onPageFinished(view, url);
				VideoViewerActivity.this.setProgressBarIndeterminateVisibility(false);
			}
		});

		// audio = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
		setVolumeControlStream(AudioManager.STREAM_MUSIC);

		Button pin = (Button) findViewById(R.id.pin);
		pin.setBackgroundResource(currentVideoItem.pinned ? R.drawable.pinned : R.drawable.unpinned);
		pin.setOnClickListener(new OnClickListener()
		{
			public void onClick(View v)
			{
				currentVideoItem.pinned = !currentVideoItem.pinned;
				v.setBackgroundResource(currentVideoItem.pinned ? R.drawable.pinned : R.drawable.unpinned);

				Thread t = new Thread(new Runnable()
				{
					public void run()
					{
						ArrayList<NameValuePair> postParameters = new ArrayList<NameValuePair>();

						postParameters.add(new BasicNameValuePair("ProfID", currentVideoItem.ProfID));
						postParameters.add(new BasicNameValuePair("VideoID", currentVideoItem.ID));
						postParameters.add(new BasicNameValuePair("Pin", currentVideoItem.pinned ? "1" : "0"));

						try
						{
							final String urlPin = "https://www.sherpin.com/xml/xml_pinvideo.php";
							UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(postParameters);

							HttpResponse response = WebUtil.PostResponse(urlPin, formEntity, VideoViewerActivity.this);
							HttpEntity entity = response.getEntity();
							Log.e("PINSHERPA", "Response status: " + response.getStatusLine());
							entity.consumeContent();
						}
						catch (Exception ex)
						{
							Log.e("PINSHERPA", "Pin: " + ex.getMessage());
						}
					}
				});
				t.start();
			}
		});
		Button detailbutton = (Button) findViewById(R.id.VideoDetail);
		detailbutton.setOnClickListener(new OnClickListener()
		{
			public void onClick(View v)
			{
				AlertDialog.Builder builder = new AlertDialog.Builder(v.getContext());
				builder.setTitle("Details:");
				final String[] items = new String[3];
				items[0] = ("Title: " + currentVideoItem.Title);
				items[1] = ("Description: " + currentVideoItem.Desc);
				items[2] = ("URL: " + currentVideoItem.URL);

				builder.setItems(items, new DialogInterface.OnClickListener()
				{
					public void onClick(DialogInterface dialog, int item)
					{
						Toast.makeText(getApplicationContext(), items[item], Toast.LENGTH_LONG).show();
					}
				});
				AlertDialog alert = builder.create();
				alert.show();
			}
		});
	}

	@Override
	protected void onResume()
	{
		super.onResume();
		loadVideoUrl();
	}

	// @Override
	// public boolean onKeyDown(int keyCode, KeyEvent event)
	// {
	// switch (keyCode)
	// {
	// case KeyEvent.KEYCODE_VOLUME_UP:
	// // audio.adjustStreamVolume(AudioManager.STREAM_MUSIC,
	// AudioManager.ADJUST_RAISE, AudioManager.FLAG_SHOW_UI);
	// return true;
	// case KeyEvent.KEYCODE_VOLUME_DOWN:
	// // audio.adjustStreamVolume(AudioManager.STREAM_MUSIC,
	// AudioManager.ADJUST_LOWER, AudioManager.FLAG_SHOW_UI);
	// return true;
	// default:
	// return super.onKeyDown(keyCode, event);
	// }
	// }

	@Override
	protected void onPause()
	{
		super.onPause();
	}

	@Override
	protected void onStop()
	{
		super.onStop();
	}

	@Override
	protected void onDestroy()
	{
		super.onDestroy();
		webview.destroy();
	}

	@Override
	public void onConfigurationChanged(Configuration newConfig)
	{
		super.onConfigurationChanged(newConfig);
	}

	private void loadVideoUrl()
	{
		String videoUrl = currentVideoItem.URL;
		if (!TextUtils.isEmpty(videoUrl))
		{
			if (webview.getVisibility() == View.INVISIBLE)
				webview.setVisibility(View.VISIBLE);

			// DisplayMetrics m =
			// getSherlockActivity().getResources().getDisplayMetrics();
			// int height = (int) (m.heightPixels / m.density) -
			// getSherlockActivity().getSupportActionBar().getHeight();// -
			// ((RelativeLayout)
			// getView().findViewById(R.id.videolayout)).getHeight();//getView().getHeight();
			// int width = (int) (m.widthPixels /
			// m.density);//getView().getWidth();
			// String showvideoCompleteURL =
			// "https://www.sherpin.com/showvideo.php?id=" + currentVideoItem.ID
			// + "&click=1&share=0&header=0";
			// String iframe = "iframe id='imgVideo' frameborder='0' width='" +
			// width + "' height='" + height + "' src='" + showvideoCompleteURL
			// + "'";
			// webview.loadDataWithBaseURL(videoUrl,
			// String.format(Global.htmlMetaTag, "<" + iframe + "/>"),
			// "text/html", "utf-8", null);

			new AsyncTask<Void, Void, String>()
			{
				@Override
				protected String doInBackground(Void... params)
				{					
					String showvideoURL = "https://www.sherpin.com/showvideo.php";
					ArrayList<NameValuePair> postParameters = new ArrayList<NameValuePair>();
					StringBuilder total = new StringBuilder();
					try
					{						
						//Add parameters for the showvideo.php request
						postParameters.add(new BasicNameValuePair("id", currentVideoItem.ID));
//						postParameters.add(new BasicNameValuePair("click", "1"));
//						postParameters.add(new BasicNameValuePair("share", "0"));
						postParameters.add(new BasicNameValuePair("header", "0"));

						UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(postParameters);

						HttpResponse resp = WebUtil.PostResponse(showvideoURL, formEntity, VideoViewerActivity.this);
						InputStream in = resp.getEntity().getContent();

						BufferedReader r = new BufferedReader(new InputStreamReader(in));
						String line;
						while ((line = r.readLine()) != null)
						{
							total.append(line);
						}
					}
					catch (Exception ex)
					{
						Log.e("ShowVideo", "showvideo error: " + ex.getMessage());
					}
					return total.toString();
				}

				@Override
				protected void onPostExecute(String html)
				{
					if (webview != null)
					{
						DisplayMetrics m = new DisplayMetrics();
						getWindowManager().getDefaultDisplay().getMetrics(m);
						int height = (int) (m.heightPixels + m.ydpi);// -
														// getSherlockActivity().getSupportActionBar().getHeight();//
														// - ((RelativeLayout)
														// getView().findViewById(R.id.videolayout)).getHeight();//getView().getHeight();
						int width = (int) (m.widthPixels + m.xdpi + 300);// getView().getWidth();
//						html = html.replace("<body id=\"showvideo\" onload=\"setvideosize()\" style=\"margin-left:auto;margin-right:auto;text-align:center\">", "<body id=\"showvideo\" onload=\"setvideosize()\" style=\"margin-left:auto;margin-right:auto;text-align:center;background:url('/Images/background.png') no-repeat center center fixed;\">");
						html = html.replace("function getvideoheight", "function h$$$");
						html = html.replace("function getvideowidth", "function w$$$");
						html = html.replace("getvideoheight()", String.valueOf(height));
						html = html.replace("getvideowidth()", String.valueOf(width));
						html = html.replace("function h$$$", "function getvideoheight");
						html = html.replace("function w$$$", "function getvideowidth");
						html = html.replace("w=466&h=263", "w=" + String.valueOf(width) + "&h=" + String.valueOf(height));
						//If we are loading a youtube then we need to alter the css on the iframe
						if (currentVideoItem.URL.contains("youtube.com"))
						{
							html = html.replace("style=\"margin-left:auto;margin-right:auto\"", "style=\"margin-left:auto;margin-right:auto;height:" + height + "px;width:" + width
									+ "px\"");
						}
//						//Only change the margins if in portrait
//						else if(orientation == Configuration.ORIENTATION_PORTRAIT)
//						{
//							html = html.replace("margin-left:auto;margin-right:auto;", "margin-bottom:0px;");
//						}
						
						webview.loadDataWithBaseURL("https://www.sherpin.com/showvideo.php", html, "text/html", "utf-8", null);
					}
					super.onPostExecute(html);
				}

			}.execute();

			// Fragment currentFragment =
			// getFragmentManager().findFragmentById(R.id.home_fragmentlayout);
			// if (videoUrl.contains("youtube.com") && !(currentFragment
			// instanceof YouTubePlayerSupportFragment))
			// {
			// launchYoutubeVideo();
			// }
			// else
			// {
			// DisplayMetrics m =
			// getSherlockActivity().getResources().getDisplayMetrics();
			// int height = (int) (m.heightPixels / m.density) -
			// getSherlockActivity().getSupportActionBar().getHeight();// -
			// ((RelativeLayout)
			// getView().findViewById(R.id.videolayout)).getHeight();//getView().getHeight();
			// int width = (int) (m.widthPixels /
			// m.density);//getView().getWidth();
			// if (videoUrl.contains("<script"))
			// {
			// int begin = videoUrl.indexOf("src=\"") + 5;
			// int end = videoUrl.indexOf("\">", begin);
			// String Url = videoUrl.substring(begin, end);
			// webview.loadDataWithBaseURL(Url,
			// String.format(Global.htmlMetaTag, Global.htmlshowvideoIframeHTML
			// + videoUrl.replace("h=263", "h=" +
			// m.heightPixels).replace("w=466", "w=" + m.widthPixels) +
			// "</iframe>"),
			// "text/html", "utf-8", null);
			// }
			// else if(videoUrl.contains("src=\""))
			// {
			// webview.loadDataWithBaseURL(videoUrl.split("src=\"")[1].replace("\"",
			// ""), String.format(Global.htmlMetaTag,
			// videoUrl.replace("height=\"270\"", "height='" + height +
			// "'").replace("width=\"480\"", "width='" + width + "'")),
			// "text/html", "utf-8", null);
			// }
			// else
			// {
			// String iframe = "iframe id='imgVideo' frameborder='0' width='" +
			// width + "' height='" + height + "' src='" + videoUrl + "'";
			// webview.loadDataWithBaseURL(videoUrl,
			// String.format(Global.htmlMetaTag, "<" + iframe + "/>"),
			// "text/html", "utf-8", null);
			// }
			// }
			// Log.e("SHERPIN", "url is " + videoUrl);
		}
	}

	private void launchYoutubeVideo()
	{
		if (youtubeFragment == null)
		{
			youtubeFragment = YouTubePlayerSupportFragment.newInstance();
			// youtubeFragment.setRetainInstance(true);
		}
		youtubeFragment.initialize(Global.youtubeAPIkey, new OnInitializedListener()
		{
			public void onInitializationSuccess(Provider provider, YouTubePlayer player, boolean wasRestored)
			{
				if (!wasRestored)
				{
					int slashIndex = currentVideoItem.URL.lastIndexOf("/") + 1;
					String videoID = currentVideoItem.URL.substring(slashIndex, currentVideoItem.URL.length());
					player.cueVideo(videoID);
				}
			}

			public void onInitializationFailure(Provider arg0, YouTubeInitializationResult arg1)
			{
				arg1.getErrorDialog(VideoViewerActivity.this, arg1.ordinal());
			}
		});
		FragmentManager m = getSupportFragmentManager();

		m.beginTransaction().replace(R.id.video_fragmentlayout, youtubeFragment).commit();
	}
}
